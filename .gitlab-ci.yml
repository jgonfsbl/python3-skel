##############################################################################
#
# GitLab CI/CD pipeline definition
# 2022-02-13 by Jonathan Gonzalez <j@0x30.io>
#
##############################################################################
#
# Using the official Python Docker image as base
image: "python:3.10-alpine3.15"

# Change PIP cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SECURE_LOG_LEVEL: "debug"

# List of stages the pipeline will be composed of
stages:
  - Linting
  - Static Analysis
  - Composition Analysis
  - Test
  - Build
  - Deploy


# ----------------------------------------------------------------------------
# Stage 1: Code linting
#
mypy:
  stage: Linting
  allow_failure: true
  before_script:
  - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -U pip
  - pip install -r requirements/devel.txt
  - echo "----------------------------------------"
  - pwd
  - ls -l
  - echo "----------------------------------------"
  script:
    - pip install mypy
    - python -m mypy src

flake8:
  stage: Linting
  allow_failure: true
  before_script:
    - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -U pip
    - pip install -r requirements/devel.txt
    - echo "----------------------------------------"
    - pwd
    - ls -l
    - echo "----------------------------------------"
  script:
    - pip install flake8
    - flake8 src --max-line-length=120 --statistics --count

pylint:
  stage: Linting
  allow_failure: true
  before_script:
    - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -U pip
    - pip install -r requirements/devel.txt
    - echo "----------------------------------------"
    - pwd
    - ls -l
    - echo "----------------------------------------"
  script:
    - pip install pylint
    - pylint src/


# ----------------------------------------------------------------------------
# Stage 2: Static Application Security Testing (SAST)
#
# Code analysis
bandit:
  stage: Static Analysis
  allow_failure: false
  before_script:
    - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -U pip
    - pip install -r requirements/devel.txt
    - echo "----------------------------------------"
    - pwd
    - ls -l
    - echo "----------------------------------------"
  script:
    - pip install tox bandit
    - bandit src -r

terrascan:
  stage: Static Analysis
  allow_failure: false
  before_script:
    - echo "Terrascan IaC analyzer running..."
  image:
    name: tenable/terrascan:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - /go/bin/terrascan scan .


# ----------------------------------------------------------------------------
# Stage 3: Software Composition Analysis (SCA)
#
# Third-party libraries security checking
jake:
  stage: Composition Analysis
  allow_failure: false
  before_script:
    - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -U pip
    - pip install -r requirements/devel.txt
    - echo "----------------------------------------"
    - pwd
    - ls -l
    - echo "----------------------------------------"
  script:
    - pip install jake
    - jake ddt --clear-cache -o sbom.json --output-format json --schema-version 1.3
  artifacts:
    reports:
      sast: /builds/luggones/logprocessor/sbom.json


# ----------------------------------------------------------------------------
# Stage 4: Application testing
#
# Unit Testing via PyTest
# Test coverage parsing in GitLab config: ^TOTAL.+?(\d+\%)$
pytest:
  stage: Test
  allow_failure: false
  before_script:
    - apk update && apk add --no-cache curl jq && rm -rf /var/cache/apk/*
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -U pip
    - pip install -r requirements/devel.txt
    - echo "----------------------------------------"
    - pwd
    - ls -l
    - echo "----------------------------------------"
  script:
    - cd tests
    - pip install pytest pytest-cov
    - export PYTHONPATH="$PYTHONPATH:."
    - python -c "import sys;print(sys.path)"
    - covorage erase
    - coverage run -m pytest
    - coverage report --fail-under 80 --include tests/*
    - coverage xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: /builds/luggones/logprocessor/tests/coverage.xml



# ----------------------------------------------------------------------------
# Stage 5: Artefact building
#
# Compilation job
build:
  stage: Build
  only:
    - main
  script:
    - echo "Building code will be inserted here"


# ----------------------------------------------------------------------------
# Stage 6: Artefact deployment
#
# Deploy to pre-production when artefact is in hotfix branch
deploy-to-preprod:
  stage: Deploy
  only:
    - hotfix
  script:
    - echo "Pre-Production deployment code will be inserted here"

# Deploy to pre-production when artefact is in main branch
deploy-to-prod:
  stage: Deploy
  only:
    - main
  script:
    - echo "Production deployment code will be inserted here"
